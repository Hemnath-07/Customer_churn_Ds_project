# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19mddwegh-XQc5fTkJ5vZKEnF-7iOdK7L
"""

# app.py – Streamlit Customer Churn Prediction Dashboard

import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

st.set_page_config(page_title="Churn Dashboard", layout="centered")

# --- Title ---
st.title("📉 Customer Churn Prediction Dashboard")
st.markdown("Analyze and predict customer churn from your subscription business data.")

# --- Load model ---
try:
    model = joblib.load("streamlit_app/churn_model_compressed.pkl")
except:
    st.error("❌ Model file not found. Please ensure 'churn_model_compressed.pkl' is in the directory.")
    st.stop()

# --- File Upload ---
uploaded_file = st.file_uploader("📁 Upload your customer CSV", type=["csv"])

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.success("✅ File uploaded successfully!")

    # --- Preview Data ---
    st.subheader("🔍 Raw Data Preview")
    st.dataframe(df.head(10), use_container_width=True)

    # --- Gender Mapping (0 → Female, 1 → Male) ---
    if 'Gender' in df.columns:
        df['Gender'] = df['Gender'].map({0: 'Female', 1: 'Male'})

    # --- Churn Column Pie Chart (if exists) ---
    if 'Churn' in df.columns:
        st.subheader("📊 Existing Churn Distribution")
        churn_counts = df['Churn'].value_counts()
        fig, ax = plt.subplots()
        ax.pie(churn_counts, labels=churn_counts.index, autopct='%1.1f%%', colors=['#ff9999','#66b3ff'], startangle=90)
        ax.axis('equal')
        st.pyplot(fig)

    # --- Churn Prediction ---
    st.subheader("🔮 Predict Churn")
    try:
        input_df = df.copy()
        drop_cols = ['Churn', 'raw_data', 'user', 'screen_list', 'first_open', 'enrolled_date']
        input_df = input_df.drop(columns=[col for col in drop_cols if col in input_df.columns], errors='ignore')

        # Fix hour column if it's still string
        if 'hour' in input_df.columns and input_df['hour'].dtype == 'object':
            input_df['hour'] = pd.to_datetime(input_df['hour'], format='%H:%M:%S', errors='coerce').dt.hour.fillna(0)

        # Convert boolean-like columns to int
        for col in ['minigame', 'used_premium_feature', 'liked']:
            if col in input_df.columns:
                input_df[col] = input_df[col].astype(int)

        # Map Gender for prediction
        if 'Gender' in input_df.columns:
            input_df['Gender'] = input_df['Gender'].map({'Male': 1, 'Female': 0})

        # Predict
        predictions = model.predict(input_df)
        df['Predicted_Churn'] = predictions

        # Show counts
        st.success("✅ Predictions completed!")

        col1, col2 = st.columns(2)
        with col1:
            st.metric("🔴 Churned", int((df['Predicted_Churn'] == 1).sum()))
        with col2:
            st.metric("🟢 Retained", int((df['Predicted_Churn'] == 0).sum()))

        # Pie chart of predictions
        st.subheader("📊 Predicted Churn Breakdown")
        pred_counts = df['Predicted_Churn'].value_counts()
        fig2, ax2 = plt.subplots()
        ax2.pie(pred_counts, labels=['Retained (0)', 'Churn (1)'], autopct='%1.1f%%', colors=['#90ee90', '#ff6961'])
        ax2.axis('equal')
        st.pyplot(fig2)

        # Download
        st.subheader("⬇️ Download Results")
        st.download_button("📥 Download CSV with Predictions", df.to_csv(index=False), file_name="predictions.csv")

    except Exception as e:
        st.error(f"❌ Prediction failed: {e}")
