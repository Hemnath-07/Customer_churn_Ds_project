# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1736sNir0Ch9iboJrypdzMvQQSlESlu-d
"""



import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

# App Configuration
st.set_page_config(page_title="Churn Prediction Dashboard", layout="wide")
st.title("📊 Customer Churn Prediction Dashboard")

# Upload CSV File
uploaded_file = st.file_uploader("Upload customer CSV file", type=["csv"])

if uploaded_file is not None:
    # Read uploaded CSV
    df = pd.read_csv(uploaded_file)
    st.success("✅ File uploaded successfully!")

    # Display Data Preview
    st.subheader("🔍 Data Preview")
    st.dataframe(df.head())

    # Load trained model
    model = joblib.load("model.pkl")

    # Drop unnecessary columns if present
    drop_cols = ['user', 'first_open', 'screen_list', 'enrolled', 'enrolled_date']
    X = df.drop(columns=[col for col in drop_cols if col in df.columns], errors='ignore')

    # Make predictions
    predictions = model.predict(X)
    probabilities = model.predict_proba(X)[:, 1] * 100  # Probability of churn

    # Add predictions to DataFrame
    df['Churn_Predicted'] = predictions
    df['Churn_Probability (%)'] = probabilities.round(2)

    # Display results
    st.subheader("📈 Churn Prediction Results")
    st.dataframe(df[['Churn_Predicted', 'Churn_Probability (%)']].head())

    # Download option
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("📥 Download Prediction CSV", data=csv, file_name='churn_predictions.csv', mime='text/csv')

    # Analytics
    st.subheader("📉 Churn Distribution")

    col1, col2 = st.columns(2)

    with col1:
        churn_count = df['Churn_Predicted'].value_counts()
        fig1, ax1 = plt.subplots()
        ax1.pie(churn_count, labels=['Not Churned', 'Churned'], autopct='%1.1f%%', colors=['green', 'red'])
        ax1.axis('equal')
        st.pyplot(fig1)

    with col2:
        st.bar_chart(df['Churn_Probability (%)'])

else:
    st.info("📤 Please upload a CSV file to begin.")
